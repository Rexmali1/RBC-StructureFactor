%matplotlib widget
import numpy as np
import sys
from matplotlib import pyplot as plt
import matplotlib.animation as animation
from mpl_toolkits.mplot3d import axes3d

def rearrangement(P,V,N,r):
  for j in range(N):
    for k in range(j):
      if np.linalg.norm(P[j,:]-P[k,:]) <= 2*r:
        #Assign speeds after collisio
        P21    = P[j,:]-P[k,:]
        P21    = P21 / np.linalg.norm(P21)
        PM     = (1/2)*(P[k,:]+P[j,:])
        P[j,:] = PM + r*P21
        P[k,:] = PM - r*P21
        
        #Assign speeds after collision 
        V1     = V[k,:] - np.dot(V[k,:]-V[j,:], P21) * P21
        V2     = V[j,:] + np.dot(V[k,:]-V[j,:], P21) * P21
        V[k,:] = V1        
        V[j,:] = V2
      else:
        pass

def tmin(P,V,N,L,r):
  colissions = []
  for j in range(N):
    for k in range(j):
      P12    = P[j,:]  -  P[k,:]
      V12    = V[j,:]  -  V[k,:]
        
      p1     = np.dot(P12,V12)
    
      if p1   <   0:
        dis   = (p1**2)  -  np.dot(V12,V12)*(np.dot(P12,P12)-r**2)
        
        if dis >=  0:
          h1 = (-p1 + np.sqrt(dis))/(np.dot(V12,V12))
          h2 = (-p1 - np.sqrt(dis))/(np.dot(V12,V12))
        
          if h2 > 0:
            hcol = h2
          else:
            hcol = h1 
          hcol = [hcol,j,k]
          colissions.append(hcol)
            
        else:
          pass
      else:
        pass
  if colissions == []:
    return np.array([69,69,69])  
  else:
    colissions = np.array(colissions)
    index=np.argmin(colissions[:,0])
    return colissions[index] #This function return an array with [Time collision ,
                             # index of sphere 1, index of sphere 2]

  

def wall(P,V,N,L):
  walls = []
  for j in range(N):
    #Collision with x walls
    if V[j,0] < 0:
      hx  = - P[j,0] / V[j,0]
    elif V[j,0] > 0:
      hx  = (L- P[j,0]) / V[j,0]
    else: 
      pass
    #Collision with y walls
    if V[j,1] < 0:
      hy  = - P[j,1] / V[j,1]
    elif V[j,1] > 0:
      hy  = (L- P[j,1]) / V[j,1]
    else: 
      pass
    #Collision with z walls
    if V[j,2] < 0:
      hz  = - P[j,2] / V[j,2]
    elif V[j,2] > 0:
      hz  = (L- P[j,2]) / V[j,2]
    else: 
      pass 

    hxyz=np.amin([hx,hy,hz])

    if hxyz == hx:
      hwall = [hxyz,0,j]
    elif hxyz == hy:
      hwall = [hxyz,1,j]
    elif hxyz == hz:
      hwall = [hxyz,2,j]
    else:
      pass
    
    walls.append(hwall)
  
  walls = np.array(walls)
  index=np.argmin(walls[:,0])
  return walls[index]   #This function return an array with [Time collision with a wall,
                        # Axis of collision, index of sphere] 

#Parameters of simulation
N    = 500         #Number of spheres
L    = 100.0        #Length of box
r    = 0.5         #Radius of spheres 
#h    = 0.001       #Intervale
tsim = 20          #Time of simulation
#ite  = int(tsim/h) #Number of iterations
t    = 0           #Initial time

#Speed of particles
V  = 10*(np.random.rand(N,3)-0.5) 

#Initial position

P   = L*np.random.rand(N,3)
rearrangement(P,V,N,r)
p_s = []
p_s.append(P)

#Create a figure to plot
fig = plt.figure(figsize=(6,6))
ax = fig.add_subplot(projection='3d')
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('Simulation of HS in 3D')
ax.set_xlim([0, L])
ax.set_ylim([0, L])
ax.set_zlim([0, L])
scatter = ax.scatter(P[:,0],P[:,1],P[:,2],s=3**2)

while t < tsim:
  tcol  = tmin(P,V,N,L,r)
  twall = wall(P,V,N,L)
    
  if tcol[0] == 69 or twall[0] < tcol[0]:
    P  =  P + twall[0]*V
    t  =  t + twall[0]
    
    if   V[int(twall[2]),int(twall[1])] < 0:
      P[int(twall[2]),int(twall[1])] +=  L
    elif V[int(twall[2]),int(twall[1])] > 0:
      P[int(twall[2]),int(twall[1])] -=  L
    else:
      pass
    
  else:
    P  =  P + tcol[0]*V
    t  =  t + tcol[0]
    #Assign speeds after collisio
    P21    = P[int(tcol[1]),:]-P[int(tcol[2]),:]
    P21    = P21 / np.linalg.norm(P21)
    PM     = (1/2)*(P[int(tcol[2]),:]+P[int(tcol[1]),:])
    P[int(tcol[1]),:] = PM + r*P21
    P[int(tcol[2]),:] = PM - r*P21
        
    #Assign speeds after collision 
    V1     = V[int(tcol[2]),:] - np.dot(V[int(tcol[2]),:]-V[int(tcol[1]),:], P21) * P21
    V2     = V[int(tcol[1]),:] + np.dot(V[int(tcol[2]),:]-V[int(tcol[1]),:], P21) * P21
    V[int(tcol[2]),:] = V1        
    V[int(tcol[1]),:] = V2
    
  p_s.append(P)

p_s = np.array(p_s)

def update(i):
  scatter._offsets3d = (p_s[i,:,0], p_s[i,:,1], p_s[i,:,2])
  return scatter,

                
    
ani = animation.FuncAnimation(fig, update, frames=range(len(p_s)), 
                              blit=True, interval=42,repeat=False)
ani.save("Simulation-3D.gif")
plt.show()
